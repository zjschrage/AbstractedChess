%P:[]
%N
%B
%R
%Q
%K

?rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR

$K1 = [-1, -1 ,1]
$K2 = [-1, 1 ,1]
$K3 = [1, -1 ,1]
$K4 = [1, 1 ,1]
$K5 = [0, 1 ,1]
$K6 = [0, -1 ,1]
$K7 = [1, 0 ,1]
$K8 = [-1, 0 ,1]
$K9 = [0, 0 ,1]

!atomicC1 = [REMOVE, K1];
!atomicC2 = [REMOVE, K2];
!atomicC3 = [REMOVE, K3];
!atomicC4 = [REMOVE, K4];
!atomicC5 = [REMOVE, K5];
!atomicC6 = [REMOVE, K6];
!atomicC7 = [REMOVE, K7];
!atomicC8 = [REMOVE, K8];
!atomicC9 = [REMOVE, K9];

#isPawn1 = (RELATIVE, <P, K1>)
#isPawn2 = (RELATIVE, <P, K2>)
#isPawn3 = (RELATIVE, <P, K3>)
#isPawn4 = (RELATIVE, <P, K4>)
#isPawn5 = (RELATIVE, <P, K5>)
#isPawn6 = (RELATIVE, <P, K6>)
#isPawn7 = (RELATIVE, <P, K7>)
#isPawn8 = (RELATIVE, <P, K8>)

//Knight

$N1 = [-2, -1 ,1]
$N2 = [-1, -2 ,1]
$N3 = [1, -2 ,1]
$N4 = [2, -1 ,1]
$N5 = [-2, 1 ,1]
$N6 = [-1, 2 ,1]
$N7 = [1, 2 ,1]
$N8 = [2, 1 ,1]

N.both.does(N1)
N.both.does(N2)
N.both.does(N3)
N.both.does(N4)
N.both.does(N5)
N.both.does(N6)
N.both.does(N7)
N.both.does(N8)
N.both.capture(atomicC1, isPawn1);
N.both.capture(atomicC2, isPawn2);
N.both.capture(atomicC3, isPawn3);
N.both.capture(atomicC4, isPawn4);
N.both.capture(atomicC5, isPawn5);
N.both.capture(atomicC6, isPawn6);
N.both.capture(atomicC7, isPawn7);
N.both.capture(atomicC8, isPawn8);
N.both.capture(atomicC9);

//Bishop

$B1 = [-1, -1 ,-1]
$B2 = [-1, 1 ,-1]
$B3 = [1, -1 ,-1]
$B4 = [1, 1 ,-1]

B.both.does(B1)
B.both.does(B2)
B.both.does(B3)
B.both.does(B4)
B.both.capture(atomicC1);
B.both.capture(atomicC2);
B.both.capture(atomicC3);
B.both.capture(atomicC4);
B.both.capture(atomicC5);
B.both.capture(atomicC6);
B.both.capture(atomicC7);
B.both.capture(atomicC8);
B.both.capture(atomicC9);

//Rook

$R1 = [0, 1 ,-1]
$R2 = [0, -1 ,-1]
$R3 = [1, 0 ,-1]
$R4 = [-1, 0 ,-1]

R.both.does(R1)
R.both.does(R2)
R.both.does(R3)
R.both.does(R4)
R.both.capture(atomicC1);
R.both.capture(atomicC2);
R.both.capture(atomicC3);
R.both.capture(atomicC4);
R.both.capture(atomicC5);
R.both.capture(atomicC6);
R.both.capture(atomicC7);
R.both.capture(atomicC8);
R.both.capture(atomicC9);

//Queen

Q.both.does(B1)
Q.both.does(B2)
Q.both.does(B3)
Q.both.does(B4)
Q.both.does(R1)
Q.both.does(R2)
Q.both.does(R3)
Q.both.does(R4)
Q.both.capture(atomicC1);
Q.both.capture(atomicC2);
Q.both.capture(atomicC3);
Q.both.capture(atomicC4);
Q.both.capture(atomicC5);
Q.both.capture(atomicC6);
Q.both.capture(atomicC7);
Q.both.capture(atomicC8);
Q.both.capture(atomicC9);

//King

$K9 = [-2, 0 ,1]
$K10 = [2, 0 ,1]

&first = [TIMES_MOVED, 0];
#FirstCond = (PROPERTY, </, first>)

$LR = [-4, 0, 1]
$RR = [3, 0, 1]
#LRCastle = (PROPERTY, <LR, first>)
#RRCastle = (PROPERTY, <RR, first>)

$KL1 = [-1, 0, 1]
$KL2 = [-2, 0, 1]
$KL3 = [-3, 0, 1]
$KR1 = [1, 0, 1]
$KR2 = [2, 0, 1]

#KIC1 = (RELATIVE, <*, KL1>)
#KIC2 = (RELATIVE, <*, KL2>)
#KIC3 = (RELATIVE, <*, KL2>)
#KIC4 = (RELATIVE, <*, KR1>)
#KIC5 = (RELATIVE, <*, KR2>)

!moveLRook = [MOVE, KL2, KR1];
!moveRRook = [MOVE, KR1, KL1];

K.both.does(K1)
K.both.does(K2)
K.both.does(K3)
K.both.does(K4)
K.both.does(K5)
K.both.does(K6)
K.both.does(K7)
K.both.does(K8)

K.both.must(K9, FirstCond)
K.both.must(K9, LRCastle)
K.both.cannot(K9, KIC1)
K.both.cannot(K9, KIC2)
K.both.cannot(K9, KIC3)
K.both.action(K9, moveLRook)

K.both.must(K10, FirstCond)
K.both.must(K10, RRCastle)
K.both.cannot(K10, KIC4)
K.both.cannot(K10, KIC5)
K.both.action(K10, moveRRook)

K.both.capture(atomicC1);
K.both.capture(atomicC2);
K.both.capture(atomicC3);
K.both.capture(atomicC4);
K.both.capture(atomicC5);
K.both.capture(atomicC6);
K.both.capture(atomicC7);
K.both.capture(atomicC8);
K.both.capture(atomicC9);

//Pawns

!SetEPFlag = [SET_FLAG, 0, 1, 1];

$P1 = [0, 1, 1]
$P2 = [0, 2, 1]
$P3 = [-1, 1, 1]
$P4 = [1, 1, 1]

#PIC1 = (RELATIVE, <*, P1>)
#PIC2 = (RELATIVE, <*, P2>)
#PCL  = (RELATIVE, <-, P3>)
#PCR  = (RELATIVE, <-, P4>)

P.both.capture(atomicC1);
P.both.capture(atomicC2);
P.both.capture(atomicC3);
P.both.capture(atomicC4);
P.both.capture(atomicC5);
P.both.capture(atomicC6);
P.both.capture(atomicC7);
P.both.capture(atomicC8);

P.cannot(P1, PIC1)
P.must(P2, FirstCond)
P.cannot(P2, PIC1)
P.cannot(P2, PIC2)
P.action(P2, SetEPFlag)
P.must(P3, PCL)
P.must(P4, PCR)

$P1b = [0, -1, 1]
$P2b = [0, -2, 1]
$P3b = [-1, -1, 1]
$P4b = [1, -1, 1]

#PIC1b = (RELATIVE, <*, P1b>)
#PIC2b = (RELATIVE, <*, P2b>)
#PCLb  = (RELATIVE, <-, P3b>)
#PCRb  = (RELATIVE, <-, P4b>)

p.cannot(P1b, PIC1b)
p.must(P2b, FirstCond)
p.cannot(P2b, PIC1b)
p.cannot(P2b, PIC2b)
p.action(P2b, SetEPFlag)
p.must(P3b, PCLb)
p.must(P4b, PCRb)

//En Passant

$L = [-1, 0, 1]
$R = [1, 0, 1]
&enPassantFlag = [CHECK_FLAG, 0, 1]
#PLep = (PROPERTY, <-L, enPassantFlag>)
#PRep = (PROPERTY, <-R, enPassantFlag>)

$F = [0, 1, 1]
$B = [0, -1, 1]
!captureFep = [REMOVE, F];
!captureBep = [REMOVE, B];

$PLep = [-1, 1, 1]
$PRep = [1, 1, 1]

P.must(PLep, PLep)
P.action(PLep, captureBep)
P.action(PLep, atomicC1)
P.action(PLep, atomicC2)
P.action(PLep, atomicC3)
P.action(PLep, atomicC4)
P.action(PLep, atomicC5)
P.action(PLep, atomicC6)
P.action(PLep, atomicC7)
P.action(PLep, atomicC8)
P.action(PLep, atomicC9)

P.must(PRep, PRep)
P.action(PRep, captureBep)
P.action(PRep, atomicC1)
P.action(PRep, atomicC2)
P.action(PRep, atomicC3)
P.action(PRep, atomicC4)
P.action(PRep, atomicC5)
P.action(PRep, atomicC6)
P.action(PRep, atomicC7)
P.action(PRep, atomicC8)
P.action(PRep, atomicC9)

$PLepb = [-1, -1, 1]
$PRepb = [1, -1, 1]

p.must(PLepb, PLep)
p.action(PLepb, captureFep)
p.action(PLepb, atomicC1)
p.action(PLepb, atomicC2)
p.action(PLepb, atomicC3)
p.action(PLepb, atomicC4)
p.action(PLepb, atomicC5)
p.action(PLepb, atomicC6)
p.action(PLepb, atomicC7)
p.action(PLepb, atomicC8)
p.action(PLepb, atomicC9)

p.must(PRepb, PRep)
p.action(PRepb, captureFep)
p.action(PRepb, atomicC1)
p.action(PRepb, atomicC2)
p.action(PRepb, atomicC3)
p.action(PRepb, atomicC4)
p.action(PRepb, atomicC5)
p.action(PRepb, atomicC6)
p.action(PRepb, atomicC7)
p.action(PRepb, atomicC8)
p.action(PRepb, atomicC9)
