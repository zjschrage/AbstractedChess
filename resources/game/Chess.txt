%p
%n
%b
%r
%q
%k

?8,8
?rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR

//Knight

$nV1 = [-2, -1 ,1]
$nV2 = [-1, -2 ,1]
$nV3 = [1, -2 ,1]
$nV4 = [2, -1 ,1]
$nV1 = [-2, 1 ,1]
$nV2 = [-1, 2 ,1]
$nV3 = [1, 2 ,1]
$nV4 = [2, 1 ,1]

n.does(nV1, ~, ~)
n.does(nV2, ~, ~)
n.does(nV3, ~, ~)
n.does(nV4, ~, ~)
n.does(nV5, ~, ~)
n.does(nV6, ~, ~)
n.does(nV7, ~, ~)
n.does(nV8, ~, ~)

//Bishop

$bV1 = [-1, -1 ,-1]
$bV2 = [-1, 1 ,-1]
$bV3 = [1, -1 ,-1]
$bV4 = [1, 1 ,-1]

b.does(bV1, ~, ~)
b.does(bV2, ~, ~)
b.does(bV3, ~, ~)
b.does(bV4, ~, ~)

//Rook

$rV1 = [0, 1 ,-1]
$rV2 = [0, -1 ,-1]
$rV3 = [1, 0 ,-1]
$rV4 = [-1, 0 ,-1]

r.does(rV1, ~, ~)
r.does(rV2, ~, ~)
r.does(rV3, ~, ~)
r.does(rV4, ~, ~)

//Queen

q.does(bV1, ~, ~)
q.does(bV2, ~, ~)
q.does(bV3, ~, ~)
q.does(bV4, ~, ~)
q.does(rV1, ~, ~)
q.does(rV2, ~, ~)
q.does(rV3, ~, ~)
q.does(rV4, ~, ~)

//King

$kV1 = [-1, -1 ,1]
$kV2 = [-1, 1 ,1]
$kV3 = [1, -1 ,1]
$kV4 = [1, 1 ,1]
$kV5 = [0, 1 ,1]
$kV6 = [0, -1 ,1]
$kV7 = [1, 0 ,1]
$kV8 = [-1, 0 ,1]

k.does(kV1, ~, ~)
k.does(kV2, ~, ~)
k.does(kV3, ~, ~)
k.does(kV4, ~, ~)
k.does(kV5, ~, ~)
k.does(kV6, ~, ~)
k.does(kV7, ~, ~)
k.does(kV8, ~, ~)

//Pawns

$pV1 = [0, 1, 1]
$pV2 = [0, 2, 1]
$pV3 = [-1, 1, 1]
$pV4 = [1, 1, 1]

$PV1 = [0, -1, 1]
$PV2 = [0, -2, 1]
$PV3 = [-1, -1, 1]
$PV4 = [1, -1, 1]

#pFC1 = (~, ~, </, (times_moved, 0)>)
#pIC1 = (~, <*, pV1>, ~)
#pIC2 = (~, <*, pV2>, ~)
p.onlyDoes(pV1, ~, pIC1)
p.onlyDoes(pV2, pFC1, pIC1)
p.onlyDoes(pV2, ~, pIC2)

#PIC1 = (~, <*, pV1>, ~)
#PIC2 = (~, <*, pV2>, ~)

P.onlyDoes(pV1, ~, pIC1)
P.onlyDoes(pV2, pFC1, pIC1)
P.onlyDoes(pV2, ~, pIC2)
